@using RunningBlog.Helpers
@model RunningBlog.Models.PostViewModels.CreatePostViewModel
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService


@{
    ViewData["Title"] = "Details";
}

<h2>Details of your post</h2>

<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Post.Title)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Post.Title)
            <br /><br />
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Post.Photo)
        </dt>
        <dd>
            @if (Model.Post.Photo != null)
            {
                <img src="data:image;base64,@System.Convert.ToBase64String(Model.Post.Photo)"
                    alt="company logo" width="80" height="80"
                    asp-append-version="true" />
            }
            <br /><br />
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Post.Content)
        </dt>
        <dd>
            @Html.Raw(@SiteRenderer.NewLineToBR(Model.Post.Content))
            <br /><br />
        </dd>
        @if (Model.CategorySelectList?.Count() > 0)
            {
            <dt>Categories</dt>
            <dd>
                @foreach (PostCategory postcategory in Model.Post.PostCategories)
                {
                    Category category = postcategory.Category;
                    @Html.Raw(category.Name);
                    @: <br />
                }
                <br />
            </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.Post.PublishedOn)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Post.PublishedOn)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Post.LastUpdatedOn)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Post.LastUpdatedOn)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Post.PublishedBy)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Post.PublishedBy)
        </dd>
    </dl>
    <a asp-action="Create" asp-controller="Comment" asp-route-postId="@Model.Post.Id" class="btn btn-default">Add a comment</a>
    <br /><br />

    @if(Model.Error != null && Model.Error != "")
    {
          <div class="alert alert-danger">
              <strong>Danger!</strong> @Model.Error
          </div>
    }

    @if (Model.Post.Comments.Count > 0)
    {
        <h1>Comments:</h1>
        foreach (var comment in Model.Post.Comments)
        {
            @:Posted by: @comment.PublishedBy on @comment.PublishedOn<br />
            @comment.Content<br />
            if (User.Identity.Name == comment.PublishedBy)
            {
                <div>
                    <a asp-controller="Comment" asp-action="Delete" asp-route-id="@comment.Id">Delete</a>
                </div>
            }
            <hr />
        }


    }
</div>
<div>
    @if ((await AuthorizationService.AuthorizeAsync(User, "ElevatedRights")).Succeeded)
    {
        <a asp-action="Edit" asp-route-id="@Model.Post.Id">Edit</a>
        @Html.Raw("|")
    }
    <a asp-action="Index">Back to List</a>
</div>
